input {
  file {
    path => "/data/data.csv"  # Adjust this path based on your setup
    start_position => "beginning"
    sincedb_path => "/dev/null"  # Ensures it re-reads the file every time (for testing)
  }
}

filter {
  csv {
    separator => ","  # CSV uses commas
    columns => ["Invoice/Item Number", "Date", "Store Number", "Store Name", "Address", "City", "Zip Code", "Store Location", "County Number", "County", "Category", "Category Name", "Vendor Number", "Vendor Name", "Item Number", "Item Description", "Pack", "Bottle Volume (ml)", "State Bottle Cost", "State Bottle Retail", "Bottles Sold", "Sale (Dollars)", "Volume Sold (Liters)", "Volume Sold (Gallons)"]
    skip_header => true  # Skips the header row
  }

  # Convert numeric fields to appropriate types
  mutate {
    convert => {
      "Store Number" => "integer"
      "Zip Code" => "integer"
      "County Number" => "integer"
      "Category" => "integer"
      "Vendor Number" => "integer"
      "Item Number" => "integer"
      "Pack" => "integer"
      "Bottle Volume (ml)" => "integer"
      "State Bottle Cost" => "float"
      "State Bottle Retail" => "float"
      "Bottles Sold" => "integer"
      "Sale (Dollars)" => "float"
      "Volume Sold (Liters)" => "float"
      "Volume Sold (Gallons)" => "float"
    }
  }

  # Parse the "Store Location" field (e.g., POINT (-90.483701 41.552338)) into latitude/longitude
  dissect {
    mapping => {
      "Store Location" => "POINT (%{longitude} %{latitude})"
    }
  }
  mutate {
    convert => {
      "longitude" => "float"
      "latitude" => "float"
    }
  }

  # Combine latitude and longitude into a geo_point for Elasticsearch
  mutate {
    add_field => {
      "location" => ["%{longitude}", "%{latitude}"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]  # Matches the service name in Docker Compose
    index => "liquor_sales"  # Name of the index in Elasticsearch
    action => "index"
  }
  stdout { codec => rubydebug }  # Optional: Logs output to console for debugging
}
